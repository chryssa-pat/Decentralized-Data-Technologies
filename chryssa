from kafka import KafkaProducer
import requests
import json
import time
import logging

# Ρύθμιση καταγραφής σφαλμάτων
logging.basicConfig(filename='producer_log.log', level=logging.INFO)

# Ρύθμιση του Kafka Producer
producer = KafkaProducer(
    bootstrap_servers='localhost:9092',
    value_serializer=lambda v: json.dumps(v).encode('utf-8')  # Σειριοποίηση δεδομένων σε JSON
)

# URLs για τα APIs
station_info_url = "https://dubai.publicbikesystem.net/customer/gbfs/v2/en/station_information"
station_status_url = "https://dubai.publicbikesystem.net/customer/gbfs/v2/en/station_status"
weather_url = "https://api.openweathermap.org/data/2.5/weather?lat=25.276987&lon=55.296249&appid=26d2a4e587fc68ba1d98399638a19231&units=metric"

# Συνάρτηση για αίτημα API
def fetch_data(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 429:  # Too Many Requests
            retry_after = int(response.headers.get("Retry-After", 10))
            logging.warning(f"Rate limit exceeded. Waiting for {retry_after} seconds...")
            time.sleep(retry_after)
            return fetch_data(url)  # Επαναλαμβάνουμε το αίτημα
        else:
            logging.error(f"Σφάλμα κατά το αίτημα {url}: {response.status_code}")
            return None
    except Exception as e:
        logging.error(f"Σφάλμα κατά τη λήψη δεδομένων από {url}: {str(e)}")
        return None

# Επικύρωση δεδομένων
def validate_data(data, required_keys):
    if not data:
        return False
    for key in required_keys:
        if key not in data:
            return False
    return True

# Προεπεξεργασία δεδομένων
def preprocess_station_data(data):
    stations = data.get("stations", [])
    return [{"station_id": station["station_id"], "name": station["name"], "lat": station["lat"], "lon": station["lon"]} for station in stations]

def preprocess_weather_data(data):
    return {
        "temperature": data["main"]["temp"],
        "humidity": data["main"]["humidity"],
        "weather_description": data["weather"][0]["description"],
        "wind_speed": data["wind"]["speed"]
    }

# Αποστολή δεδομένων στο Kafka
def send_data_to_kafka(topic, data):
    try:
        producer.send(topic, value=data)
        producer.flush()  # Βεβαιωθείτε ότι τα δεδομένα έχουν αποσταλεί
        logging.info(f"Τα δεδομένα αποστάλθηκαν στο Kafka topic: {topic}")
        print(f"Τα δεδομένα αποστάλθηκαν στο Kafka topic: {topic}")
    except Exception as e:
        logging.error(f"Σφάλμα κατά την αποστολή δεδομένων στο Kafka topic {topic}: {str(e)}")
        print(f"Σφάλμα κατά την αποστολή δεδομένων στο Kafka topic {topic}: {str(e)}")

# Χρονόμετρα για διαφορετικά διαστήματα ανανέωσης
station_data_interval = 300  # 5 λεπτά
weather_data_interval = 3600  # 1 ώρα

# Τελευταία φορά που ενημερώθηκαν τα δεδομένα
last_station_update = time.time() - station_data_interval  # Για άμεση εκτέλεση στην αρχή
last_weather_update = time.time() - weather_data_interval  # Για άμεση εκτέλεση στην αρχή

print("Kafka Producer has started, fetching and sending data to Kafka topics...")

# Κύριος βρόχος για ανανέωση δεδομένων
while True:
    current_time = time.time()

    # Ανανέωση δεδομένων σταθμών κάθε 5 λεπτά
    if current_time - last_station_update >= station_data_interval:
        print("Ανανέωση δεδομένων σταθμών...")
        station_info_data = fetch_data(station_info_url)
        station_status_data = fetch_data(station_status_url)

        # Επικύρωση και αποστολή των δεδομένων σταθμών
        if station_info_data and validate_data(station_info_data, ["data", "stations"]):
            preprocessed_station_info = preprocess_station_data(station_info_data["data"])
            send_data_to_kafka('station_information', preprocessed_station_info)

        if station_status_data and validate_data(station_status_data, ["data", "stations"]):
            send_data_to_kafka('station_status', station_status_data["data"])

        last_station_update = current_time

    # Ανανέωση δεδομένων καιρού κάθε 1 ώρα
    if current_time - last_weather_update >= weather_data_interval:
        print("Ανανέωση δεδομένων καιρού...")
        weather_data = fetch_data(weather_url)

        # Επικύρωση και αποστολή των δεδομένων καιρού
        if weather_data and validate_data(weather_data, ["main", "weather", "wind"]):
            preprocessed_weather_data = preprocess_weather_data(weather_data)
            send_data_to_kafka('weather_data', preprocessed_weather_data)

        last_weather_update = current_time

    # Αναμονή 1 δευτερόλεπτο πριν την επόμενη εκτέλεση
    time.sleep(1)
